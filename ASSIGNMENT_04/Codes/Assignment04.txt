libraries collection:

{
    _id: {"$oid":"60d5fbb2f295f5e2c4d5a8a1"},
    name: "Central Library",
    location: "Downtown"
},
{
    _id: {"$oid":"60d5fbb2f295f5e2c4d5a8a2"},
    name: "Westside Branch",
    location: "Westside"
}

books collection:
[
{
    _id: ObjectId("60d5fc5ef295f5e2c4d5a8a3"),
    title: "To Kill a Mockingbird",
    library_id: ObjectId("60d5fbb2f295f5e2c4d5a8a1"),
    author_ids: [ObjectId("60d5fd3ef295f5e2c4d5a8a4")]
},
{
    _id: ObjectId("60d5fc5ef295f5e2c4d5a8a5"),
    title: "1984",
    library_id: ObjectId("60d5fbb2f295f5e2c4d5a8a2"),
    author_ids: [ObjectId("60d5fd3ef295f5e2c4d5a8a6")]
},
{
    _id: ObjectId("60d5fc5ef295f5e2c4d5a8a7"),
    title: "Harry Potter and the Philosopher's Stone",
    library_id: ObjectId("60d5fbb2f295f5e2c4d5a8a1"),
    author_ids: [ObjectId("60d5fd3ef295f5e2c4d5a8a8"), ObjectId("60d5fd3ef295f5e2c4d5a8a9")]
}
]
authors collection:
{
    _id: {"$oid":"60d5fd3ef295f5e2c4d5a8a4"},
    name: "Harper Lee",
    birth_year: 1926
},
{
    _id: {"$oid":"60d5fd3ef295f5e2c4d5a8a6"},
    name: "George Orwell",
    birth_year: 1903
},
{
    _id: {"$oid":"60d5fd3ef295f5e2c4d5a8a8"},
    name: "J.K. Rowling",
    birth_year: 1965
},
{
    _id: {"$oid":"60d5fd3ef295f5e2c4d5a8a9"},
    name: "John Tiffany",
    birth_year: 1971
}


1. Create a Database Librarydb.
2. Create collections named libraries, books and authors.


3. Insert some sample documents into the collections.


//books
db.books.insertMany(
[
{
    _id: ObjectId("60d5fc5ef295f5e2c4d5a8a3"),
    title: "To Kill a Mockingbird",
    library_id: ObjectId("60d5fbb2f295f5e2c4d5a8a1"),
    author_ids: [ObjectId("60d5fd3ef295f5e2c4d5a8a4")]
},
{
    _id: ObjectId("60d5fc5ef295f5e2c4d5a8a5"),
    title: "1984",
    library_id: ObjectId("60d5fbb2f295f5e2c4d5a8a2"),
    author_ids: [ObjectId("60d5fd3ef295f5e2c4d5a8a6")]
},
{
    _id: ObjectId("60d5fc5ef295f5e2c4d5a8a7"),
    title: "Harry Potter and the Philosopher's Stone",
    library_id: ObjectId("60d5fbb2f295f5e2c4d5a8a1"),
    author_ids: [ObjectId("60d5fd3ef295f5e2c4d5a8a8"), ObjectId("60d5fd3ef295f5e2c4d5a8a9")]
}
])

{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('60d5fc5ef295f5e2c4d5a8a3'),
    '1': ObjectId('60d5fc5ef295f5e2c4d5a8a5'),
    '2': ObjectId('60d5fc5ef295f5e2c4d5a8a7')
  }
}



4. Find all books in the "Central Library".
db.books.find({ library_id: centralLibrary._id }, { title: 1, _id: 0 });

output:-
{
  title: 'To Kill a Mockingbird'
}
{
  title: "Harry Potter and the Philosopher's Stone"
}


5. List all libraries along with the number of books they have.
db.libraries.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "library_id",
      as: "books"
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      location: 1,
      book_count: { $size: "$books" }
    }
  }
])


6. Find all books written by "J.K. Rowling".
//1 way
const rowling = db.authors.findOne({ name: "J.K. Rowling" });
db.books.find({ author_ids: rowling._id }, { title: 1, _id: 0 });


//2 waydb.books.aggregate([
  {
    $lookup: {
      from: "authors",
      localField: "author_ids",
      foreignField: "_id",
      as: "authors"
    }
  },
  {
    $match: {
      "authors.name": "J.K. Rowling"
    }
  },
  {
    $project: {
      _id: 0,
      title: 1
    }
  }
])

output:-
{
  title: "Harry Potter and the Philosopher's Stone"
}

7. List all authors along with the books they have written.
db.authors.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "author_ids",
      as: "books"
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      books: "$books.title"
    }
  }
])



8. Find all books along with their authors' details.
db.books.aggregate([
  {
    $lookup: {
      from: "authors",
      localField: "author_ids",
      foreignField: "_id",
      as: "authors"
    }
  },
  {
    $project: {
      _id: 0,
      title: 1,
      authors: {
        name: 1,
        birth_year: 1
      }
    }
  }
])


9. List all libraries and the number of books they have, including libraries with no books.

db.libraries.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "library_id",
      as: "books"
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      location: 1,
      book_count: { $size: "$books" }
    }
  }
])



10. Calculate the average number of books per library.

db.libraries.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "library_id",
      as: "books"
    }
  },
  {
    $project: {
      book_count: { $size: "$books" }
    }
  },
  {
    $group: {
      _id: null,
      average_books: { $avg: "$book_count" }
    }
  },
  {
    $project: {
      _id: 0,
      average_books: { $round: ["$average_books", 2] } // Optional rounding to 2 decimal places
    }
  }
])


11. Find all authors who have written more than one book.
db.books.aggregate([
  { $unwind: "$author_ids" },
  {
    $group: {
      _id: "$author_ids",
      book_count: { $sum: 1 }
    }
  },
  { $match: { book_count: { $gt: 1 } } },
  {
    $lookup: {
      from: "authors",
      localField: "_id",
      foreignField: "_id",
      as: "author"
    }
  },
  { $unwind: "$author" },
  {
    $project: {
      _id: 0,
      name: "$author.name",
      book_count: 1
    }
  }
])

12. Retrieve all books along with their authors' names and the library they belong to.
db.books.aggregate([
  {
    $lookup: {
      from: "authors",
      localField: "author_ids",
      foreignField: "_id",
      as: "authors"
    }
  },
  {
    $lookup: {
      from: "libraries",
      localField: "library_id",
      foreignField: "_id",
      as: "library"
    }
  },
  {
    $unwind: "$library"
  },
  {
    $project: {
      _id: 0,
      title: 1,
      authors: "$authors.name",
      library: "$library.name"
    }
  }
])


13. List all authors who have not written any books.
db.authors.aggregate([
  {
    $lookup: {
      from: "books",
      localField: "_id",
      foreignField: "author_ids",
      as: "books"
    }
  },
  {
    $match: {
      books: { $eq: [] }
    }
  },
  {
    $project: {
      _id: 0,
      name: 1,
      birth_year: 1
    }
  }
])
